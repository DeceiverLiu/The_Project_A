package com.lanou3g.the_project_a.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COLLECTION_PERSON".
*/
public class CollectionPersonDao extends AbstractDao<CollectionPerson, Long> {

    public static final String TABLENAME = "COLLECTION_PERSON";

    /**
     * Properties of entity CollectionPerson.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Source = new Property(2, String.class, "source", false, "SOURCE");
        public final static Property Tail = new Property(3, String.class, "tail", false, "TAIL");
        public final static Property Background = new Property(4, String.class, "background", false, "BACKGROUND");
        public final static Property Image = new Property(5, String.class, "image", false, "IMAGE");
    }


    public CollectionPersonDao(DaoConfig config) {
        super(config);
    }
    
    public CollectionPersonDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COLLECTION_PERSON\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TITLE\" TEXT," + // 1: title
                "\"SOURCE\" TEXT," + // 2: source
                "\"TAIL\" TEXT," + // 3: tail
                "\"BACKGROUND\" TEXT," + // 4: background
                "\"IMAGE\" TEXT);"); // 5: image
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COLLECTION_PERSON\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CollectionPerson entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String source = entity.getSource();
        if (source != null) {
            stmt.bindString(3, source);
        }
 
        String tail = entity.getTail();
        if (tail != null) {
            stmt.bindString(4, tail);
        }
 
        String background = entity.getBackground();
        if (background != null) {
            stmt.bindString(5, background);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(6, image);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CollectionPerson entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String source = entity.getSource();
        if (source != null) {
            stmt.bindString(3, source);
        }
 
        String tail = entity.getTail();
        if (tail != null) {
            stmt.bindString(4, tail);
        }
 
        String background = entity.getBackground();
        if (background != null) {
            stmt.bindString(5, background);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(6, image);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CollectionPerson readEntity(Cursor cursor, int offset) {
        CollectionPerson entity = new CollectionPerson( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // source
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // tail
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // background
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // image
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CollectionPerson entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSource(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTail(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBackground(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setImage(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CollectionPerson entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CollectionPerson entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CollectionPerson entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
